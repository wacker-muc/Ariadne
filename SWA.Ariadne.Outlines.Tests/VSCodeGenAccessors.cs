// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SWA.Ariadne.Outlines.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_TilesOutlineShapeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.TilesOutlineShape");
    
    internal SWA_Ariadne_Outlines_TilesOutlineShapeAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_ExplicitOutlineShapeAccessor tile {
        get {
            object _ret_val = m_privateObject.GetField("tile");
            global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_ExplicitOutlineShapeAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_ExplicitOutlineShapeAccessor(_ret_val);
            }
            global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_ExplicitOutlineShapeAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("tile", value);
        }
    }
    
    internal int[] xRepetitions {
        get {
            int[] ret = ((int[])(m_privateObject.GetField("xRepetitions")));
            return ret;
        }
        set {
            m_privateObject.SetField("xRepetitions", value);
        }
    }
    
    internal int[] yRepetitions {
        get {
            int[] ret = ((int[])(m_privateObject.GetField("yRepetitions")));
            return ret;
        }
        set {
            m_privateObject.SetField("yRepetitions", value);
        }
    }
    
    internal int xTileSize {
        get {
            int ret = ((int)(m_privateObject.GetField("xTileSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("xTileSize", value);
        }
    }
    
    internal int yTileSize {
        get {
            int ret = ((int)(m_privateObject.GetField("yTileSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("yTileSize", value);
        }
    }
    
    internal int[] xMap {
        get {
            int[] ret = ((int[])(m_privateObject.GetField("xMap")));
            return ret;
        }
        set {
            m_privateObject.SetField("xMap", value);
        }
    }
    
    internal int[] yMap {
        get {
            int[] ret = ((int[])(m_privateObject.GetField("yMap")));
            return ret;
        }
        set {
            m_privateObject.SetField("yMap", value);
        }
    }
    
    internal bool this[int x, int y] {
        get {
            object[] args = new object[] {
                    x,
                    y};
            bool ret = ((bool)(m_privateObject.GetProperty("Item", new System.Type[] {
                        typeof(int),
                        typeof(int)}, args)));
            return ret;
        }
    }
    
    internal void SetValue(int x, int y, bool value) {
        object[] args = new object[] {
                x,
                y,
                value};
        m_privateObject.Invoke("SetValue", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(bool)}, args);
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int xSize, int ySize, int xTileSize, int yTileSize) {
        object[] args = new object[] {
                xSize,
                ySize,
                xTileSize,
                yTileSize};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.TilesOutlineShape", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int xSize, int ySize, global::System.Drawing.Bitmap template) {
        object[] args = new object[] {
                xSize,
                ySize,
                template};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.TilesOutlineShape", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(global::System.Drawing.Bitmap)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape RandomInstance(global::System.Random r, int xSize, int ySize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("RandomInstance", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape StripesOrGrid(global::System.Random r, int xSize, int ySize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("StripesOrGrid", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape Ribbons(global::System.Random r, int xSize, int ySize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("Ribbons", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape Pentominoes(global::System.Random r, int xSize, int ySize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("Pentominoes", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape FromBitmap(global::System.Random r, int xSize, int ySize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("FromBitmap", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape FromBitmap(int xSize, int ySize, global::System.Drawing.Bitmap bitmap, global::System.Drawing.RotateFlipType rft, int scale) {
        object[] args = new object[] {
                xSize,
                ySize,
                bitmap,
                rft,
                scale};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("FromBitmap", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.RotateFlipType),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal void SetXRepetitions(int pos, int num) {
        object[] args = new object[] {
                pos,
                num};
        m_privateObject.Invoke("SetXRepetitions", new System.Type[] {
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal void SetYRepetitions(int pos, int num) {
        object[] args = new object[] {
                pos,
                num};
        m_privateObject.Invoke("SetYRepetitions", new System.Type[] {
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal void SetRepetitions(int pos, int num) {
        object[] args = new object[] {
                pos,
                num};
        m_privateObject.Invoke("SetRepetitions", new System.Type[] {
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal void SetXRepetitions(int num) {
        object[] args = new object[] {
                num};
        m_privateObject.Invoke("SetXRepetitions", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal void SetYRepetitions(int num) {
        object[] args = new object[] {
                num};
        m_privateObject.Invoke("SetYRepetitions", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal void SetRepetitions(int num) {
        object[] args = new object[] {
                num};
        m_privateObject.Invoke("SetRepetitions", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal void UpdateTileSize() {
        object[] args = new object[0];
        m_privateObject.Invoke("UpdateTileSize", new System.Type[0], args);
    }
    
    internal void UpdateCoordinateMapping() {
        object[] args = new object[0];
        m_privateObject.Invoke("UpdateCoordinateMapping", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_ExplicitOutlineShapeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.ExplicitOutlineShape");
    
    internal SWA_Ariadne_Outlines_ExplicitOutlineShapeAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal bool this[int x, int y] {
        get {
            object[] args = new object[] {
                    x,
                    y};
            bool ret = ((bool)(m_privateObject.GetProperty("Item", new System.Type[] {
                        typeof(int),
                        typeof(int)}, args)));
            return ret;
        }
    }
    
    internal byte[,] squares {
        get {
            byte[,] ret = ((byte[,])(m_privateObject.GetField("squares")));
            return ret;
        }
        set {
            m_privateObject.SetField("squares", value);
        }
    }
    
    internal void SetValue(int x, int y, bool value) {
        object[] args = new object[] {
                x,
                y,
                value};
        m_privateObject.Invoke("SetValue", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(bool)}, args);
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int xSize, int ySize) {
        object[] args = new object[] {
                xSize,
                ySize};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.ExplicitOutlineShape", new System.Type[] {
                    typeof(int),
                    typeof(int)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(global::SWA.Ariadne.Outlines.OutlineShape template) {
        object[] args = new object[] {
                template};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.ExplicitOutlineShape", new System.Type[] {
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(global::SWA.Ariadne.Outlines.OutlineShape template, global::SWA.Ariadne.Outlines.OutlineShape.InsideShapeDelegate isReserved) {
        object[] args = new object[] {
                template,
                isReserved};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.ExplicitOutlineShape", new System.Type[] {
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape),
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape.InsideShapeDelegate)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(global::System.Drawing.Bitmap template) {
        object[] args = new object[] {
                template};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.ExplicitOutlineShape", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape ConnectedSubset(global::SWA.Ariadne.Outlines.OutlineShape template, global::SWA.Ariadne.Outlines.OutlineShape.InsideShapeDelegate isReserved) {
        object[] args = new object[] {
                template,
                isReserved};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("ConnectedSubset", new System.Type[] {
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape),
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape.InsideShapeDelegate)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape Closure(global::SWA.Ariadne.Outlines.OutlineShape template, global::SWA.Ariadne.Outlines.OutlineShape.InsideShapeDelegate isReserved) {
        object[] args = new object[] {
                template,
                isReserved};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("Closure", new System.Type[] {
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape),
                    typeof(global::SWA.Ariadne.Outlines.OutlineShape.InsideShapeDelegate)}, args)));
        return ret;
    }
    
    internal int FillSubset(int x, int y, byte id) {
        object[] args = new object[] {
                x,
                y,
                id};
        int ret = ((int)(m_privateObject.Invoke("FillSubset", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(byte)}, args)));
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape Char(int xSize, int ySize, double centerX, double centerY, double shapeSize, char ch, global::System.Drawing.FontFamily fontFamily) {
        object[] args = new object[] {
                xSize,
                ySize,
                centerX,
                centerY,
                shapeSize,
                ch,
                fontFamily};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("Char", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(char),
                    typeof(global::System.Drawing.FontFamily)}, args)));
        return ret;
    }
    
    internal static void ScaleImage(ref global::System.Drawing.Bitmap img, double sz, out int imgXCenter, out int imgYCenter) {
        object[] args = new object[] {
                img,
                sz,
                null,
                null};
        m_privateType.InvokeStatic("ScaleImage", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap).MakeByRefType(),
                    typeof(double),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType()}, args);
        img = ((global::System.Drawing.Bitmap)(args[0]));
        imgXCenter = ((int)(args[2]));
        imgYCenter = ((int)(args[3]));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_OutlineShapeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::SWA.Ariadne.Outlines.OutlineShape));
    
    internal SWA_Ariadne_Outlines_OutlineShapeAccessor(global::SWA.Ariadne.Outlines.OutlineShape target) : 
            base(target, m_privateType) {
    }
    
    internal int xSize {
        get {
            int ret = ((int)(m_privateObject.GetField("xSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("xSize", value);
        }
    }
    
    internal int ySize {
        get {
            int ret = ((int)(m_privateObject.GetField("ySize")));
            return ret;
        }
        set {
            m_privateObject.SetField("ySize", value);
        }
    }
    
    internal int XSize {
        get {
            int ret = ((int)(m_privateObject.GetProperty("XSize")));
            return ret;
        }
    }
    
    internal int YSize {
        get {
            int ret = ((int)(m_privateObject.GetProperty("YSize")));
            return ret;
        }
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int xSize, int ySize) {
        object[] args = new object[] {
                xSize,
                ySize};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::SWA.Ariadne.Outlines.OutlineShape), new System.Type[] {
                    typeof(int),
                    typeof(int)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape Rectangles(global::System.Random r, int xSize, int ySize, double centerX, double centerY, double shapeSize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize,
                centerX,
                centerY,
                shapeSize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("Rectangles", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int),
                    typeof(double),
                    typeof(double),
                    typeof(double)}, args)));
        return ret;
    }
    
    internal static void ConvertParameters(int xSize, int ySize, double centerX, double centerY, double shapeSize, out double xc, out double yc, out double sz) {
        object[] args = new object[] {
                xSize,
                ySize,
                centerX,
                centerY,
                shapeSize,
                null,
                null,
                null};
        m_privateType.InvokeStatic("ConvertParameters", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(double).MakeByRefType(),
                    typeof(double).MakeByRefType(),
                    typeof(double).MakeByRefType()}, args);
        xc = ((double)(args[5]));
        yc = ((double)(args[6]));
        sz = ((double)(args[7]));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_Resources_TilesAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.Resources.Tiles");
    
    internal SWA_Ariadne_Outlines_Resources_TilesAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static global::System.Resources.ResourceManager resourceMan {
        get {
            global::System.Resources.ResourceManager ret = ((global::System.Resources.ResourceManager)(m_privateType.GetStaticField("resourceMan")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("resourceMan", value);
        }
    }
    
    internal static global::System.Globalization.CultureInfo resourceCulture {
        get {
            global::System.Globalization.CultureInfo ret = ((global::System.Globalization.CultureInfo)(m_privateType.GetStaticField("resourceCulture")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("resourceCulture", value);
        }
    }
    
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            global::System.Resources.ResourceManager ret = ((global::System.Resources.ResourceManager)(m_privateType.GetStaticProperty("ResourceManager")));
            return ret;
        }
    }
    
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            global::System.Globalization.CultureInfo ret = ((global::System.Globalization.CultureInfo)(m_privateType.GetStaticProperty("Culture")));
            return ret;
        }
        set {
            m_privateType.SetStaticProperty("Culture", value);
        }
    }
    
    internal static global::System.Drawing.Bitmap Comb01_12x12 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Comb01_12x12")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Comb02_16x16 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Comb02_16x16")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Comb03_20x20 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Comb03_20x20")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Comb04_16x12 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Comb04_16x12")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Puzzle10 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Puzzle10")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Puzzle14 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Puzzle14")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Puzzle14a {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Puzzle14a")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Puzzle16 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Puzzle16")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Puzzle16a {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Puzzle16a")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile01_8x8 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile01_8x8")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile02_8x32 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile02_8x32")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile03_8x8 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile03_8x8")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile04_34x34 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile04_34x34")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile05_6x6 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile05_6x6")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile06_4x4 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile06_4x4")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile07_16x10 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile07_16x10")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Tile12_10x10 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Tile12_10x10")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Zigzag01_9x9 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Zigzag01_9x9")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Zigzag02_9x9 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Zigzag02_9x9")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Zigzag03_18x18 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Zigzag03_18x18")));
            return ret;
        }
    }
    
    internal static global::System.Drawing.Bitmap Zigzag03_9x9 {
        get {
            global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.GetStaticProperty("Zigzag03_9x9")));
            return ret;
        }
    }
    
    internal static object CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.Resources.Tiles", new System.Type[0], args);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_DistortedOutlineShapeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.DistortedOutlineShape");
    
    internal SWA_Ariadne_Outlines_DistortedOutlineShapeAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor baseShape {
        get {
            object _ret_val = m_privateObject.GetField("baseShape");
            global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor(_ret_val);
            }
            global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("baseShape", value);
        }
    }
    
    internal global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor distortion {
        get {
            object _ret_val = m_privateObject.GetField("distortion");
            global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor(new SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker(((System.Delegate)(_ret_val))).Invoke);
            }
            global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("distortion", value);
        }
    }
    
    internal bool this[double x, double y] {
        get {
            object[] args = new object[] {
                    x,
                    y};
            bool ret = ((bool)(m_privateObject.GetProperty("Item", new System.Type[] {
                        typeof(double),
                        typeof(double)}, args)));
            return ret;
        }
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int xSize, int ySize, global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor baseShape, global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor distortion) {
        object baseShape_val_target = null;
        if ((baseShape != null)) {
            baseShape_val_target = baseShape.Target;
        }
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback1 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.DistortedOutlineShape+Distortion");
        object[] args = new object[] {
                xSize,
                ySize,
                baseShape_val_target,
                System.Delegate.CreateDelegate(target_fallback1.ReferencedType, new SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker(distortion), "Invoke")};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback2 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.SmoothOutlineShape");
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback3 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.DistortedOutlineShape+Distortion");
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.DistortedOutlineShape", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    target_fallback2.ReferencedType,
                    target_fallback3.ReferencedType}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal static global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor SpiralDistortion(double xCenter, double yCenter, double size, double winding) {
        object[] args = new object[] {
                xCenter,
                yCenter,
                size,
                winding};
        object _ret_val = m_privateType.InvokeStatic("SpiralDistortion", new System.Type[] {
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(double)}, args);
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor(new SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker(((System.Delegate)(_ret_val))).Invoke);
        }
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor ret = _ret;
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor RadialWaveDistortion(double xCenter, double yCenter, int waveCount, double waveShift, double minRatio) {
        object[] args = new object[] {
                xCenter,
                yCenter,
                waveCount,
                waveShift,
                minRatio};
        object _ret_val = m_privateType.InvokeStatic("RadialWaveDistortion", new System.Type[] {
                    typeof(double),
                    typeof(double),
                    typeof(int),
                    typeof(double),
                    typeof(double)}, args);
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor(new SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker(((System.Delegate)(_ret_val))).Invoke);
        }
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor ret = _ret;
        return ret;
    }
    
    internal static void RectToLocalPolar(double xCenter, double yCenter, double x, double y, out double r, out double phi) {
        object[] args = new object[] {
                xCenter,
                yCenter,
                x,
                y,
                null,
                null};
        m_privateType.InvokeStatic("RectToLocalPolar", new System.Type[] {
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(double).MakeByRefType(),
                    typeof(double).MakeByRefType()}, args);
        r = ((double)(args[4]));
        phi = ((double)(args[5]));
    }
    
    internal static void LocalPolarToRect(double xCenter, double yCenter, double r, double phi, out double x, out double y) {
        object[] args = new object[] {
                xCenter,
                yCenter,
                r,
                phi,
                null,
                null};
        m_privateType.InvokeStatic("LocalPolarToRect", new System.Type[] {
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(double),
                    typeof(double).MakeByRefType(),
                    typeof(double).MakeByRefType()}, args);
        x = ((double)(args[4]));
        y = ((double)(args[5]));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_PolygonOutlineShapeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.PolygonOutlineShape");
    
    internal SWA_Ariadne_Outlines_PolygonOutlineShapeAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal int corners {
        get {
            int ret = ((int)(m_privateObject.GetField("corners")));
            return ret;
        }
        set {
            m_privateObject.SetField("corners", value);
        }
    }
    
    internal int windings {
        get {
            int ret = ((int)(m_privateObject.GetField("windings")));
            return ret;
        }
        set {
            m_privateObject.SetField("windings", value);
        }
    }
    
    internal double slant {
        get {
            double ret = ((double)(m_privateObject.GetField("slant")));
            return ret;
        }
        set {
            m_privateObject.SetField("slant", value);
        }
    }
    
    internal double halfSectorAngle {
        get {
            double ret = ((double)(m_privateObject.GetField("halfSectorAngle")));
            return ret;
        }
        set {
            m_privateObject.SetField("halfSectorAngle", value);
        }
    }
    
    internal double fullSectorAngle {
        get {
            double ret = ((double)(m_privateObject.GetField("fullSectorAngle")));
            return ret;
        }
        set {
            m_privateObject.SetField("fullSectorAngle", value);
        }
    }
    
    internal double sliceAngle {
        get {
            double ret = ((double)(m_privateObject.GetField("sliceAngle")));
            return ret;
        }
        set {
            m_privateObject.SetField("sliceAngle", value);
        }
    }
    
    internal double xEdge {
        get {
            double ret = ((double)(m_privateObject.GetField("xEdge")));
            return ret;
        }
        set {
            m_privateObject.SetField("xEdge", value);
        }
    }
    
    internal int[] sliceRotationMap {
        get {
            int[] ret = ((int[])(m_privateObject.GetField("sliceRotationMap")));
            return ret;
        }
        set {
            m_privateObject.SetField("sliceRotationMap", value);
        }
    }
    
    internal bool this[double x, double y] {
        get {
            object[] args = new object[] {
                    x,
                    y};
            bool ret = ((bool)(m_privateObject.GetProperty("Item", new System.Type[] {
                        typeof(double),
                        typeof(double)}, args)));
            return ret;
        }
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int corners, int windings, double slant, int xSize, int ySize, double centerX, double centerY, double shapeSize) {
        object[] args = new object[] {
                corners,
                windings,
                slant,
                xSize,
                ySize,
                centerX,
                centerY,
                shapeSize};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.PolygonOutlineShape", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(double),
                    typeof(int),
                    typeof(int),
                    typeof(double),
                    typeof(double),
                    typeof(double)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal void BuildSliceRotationMap() {
        object[] args = new object[0];
        m_privateObject.Invoke("BuildSliceRotationMap", new System.Type[0], args);
    }
    
    internal global::SWA.Ariadne.Outlines.OutlineShape DistortedCopy(global::System.Random r) {
        object[] args = new object[] {
                r};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateObject.Invoke("DistortedCopy", new System.Type[] {
                    typeof(global::System.Random)}, args)));
        return ret;
    }
    
    internal global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor SpiralDistortedCopy(global::System.Random r) {
        object[] args = new object[] {
                r};
        object _ret_val = m_privateObject.Invoke("SpiralDistortedCopy", new System.Type[] {
                    typeof(global::System.Random)}, args);
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor(_ret_val);
        }
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor ret = _ret;
        return ret;
    }
    
    internal global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor RadialWaveDistortedCopy(global::System.Random r) {
        object[] args = new object[] {
                r};
        object _ret_val = m_privateObject.Invoke("RadialWaveDistortedCopy", new System.Type[] {
                    typeof(global::System.Random)}, args);
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor(_ret_val);
        }
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor ret = _ret;
        return ret;
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape Random(global::System.Random r, int xSize, int ySize, double centerX, double centerY, double shapeSize) {
        object[] args = new object[] {
                r,
                xSize,
                ySize,
                centerX,
                centerY,
                shapeSize};
        global::SWA.Ariadne.Outlines.OutlineShape ret = ((global::SWA.Ariadne.Outlines.OutlineShape)(m_privateType.InvokeStatic("Random", new System.Type[] {
                    typeof(global::System.Random),
                    typeof(int),
                    typeof(int),
                    typeof(double),
                    typeof(double),
                    typeof(double)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.SmoothOutlineShape");
    
    internal SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal bool this[double x, double y] {
        get {
            object[] args = new object[] {
                    x,
                    y};
            bool ret = ((bool)(m_privateObject.GetProperty("Item", new System.Type[] {
                        typeof(double),
                        typeof(double)}, args)));
            return ret;
        }
    }
    
    internal bool this[int x, int y] {
        get {
            object[] args = new object[] {
                    x,
                    y};
            bool ret = ((bool)(m_privateObject.GetProperty("Item", new System.Type[] {
                        typeof(int),
                        typeof(int)}, args)));
            return ret;
        }
    }
    
    internal static global::SWA.Ariadne.Outlines.OutlineShape CreatePrivate(int xSize, int ySize) {
        object[] args = new object[] {
                xSize,
                ySize};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.SmoothOutlineShape", new System.Type[] {
                    typeof(int),
                    typeof(int)}, args);
        return ((global::SWA.Ariadne.Outlines.OutlineShape)(priv_obj.Target));
    }
    
    internal global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor DistortedCopy(global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor distortion) {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback1 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.DistortedOutlineShape+Distortion");
        object[] args = new object[] {
                System.Delegate.CreateDelegate(target_fallback1.ReferencedType, new SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker(distortion), "Invoke")};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target_fallback2 = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Outlines", "SWA.Ariadne.Outlines.DistortedOutlineShape+Distortion");
        object _ret_val = m_privateObject.Invoke("DistortedCopy", new System.Type[] {
                    target_fallback2.ReferencedType}, args);
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor(_ret_val);
        }
        global::SWA.Ariadne.Outlines.Tests.SWA_Ariadne_Outlines_SmoothOutlineShapeAccessor ret = _ret;
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker {
    
    private System.Delegate d;
    
    internal SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessorInvoker(System.Delegate _d) {
        d = _d;
    }
    
    internal virtual void Invoke(ref double x, ref double y) {
        object[] args = new object[] {
                x,
                y};
        d.DynamicInvoke(args);
        x = ((double)(args[0]));
        y = ((double)(args[1]));
    }
}
delegate void SWA_Ariadne_Outlines_DistortedOutlineShape_DistortionAccessor(ref double x, ref double y);
}

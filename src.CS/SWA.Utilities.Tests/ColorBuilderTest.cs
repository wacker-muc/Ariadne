// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Drawing;

using SWA.Utilities;

namespace SWA.Utilities.Tests
{
    /// <summary>
    ///This is a test class for SWA.Utilities.ColorBuilder and is intended
    ///to contain all SWA.Utilities.ColorBuilder Unit Tests
    ///</summary>
    [TestClass()]
    public class ColorBuilderTest
    {
        #region TestContext

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #endregion

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #region Unit tests

        /// <summary>
        ///A test for ConvertHSBToColor (float, float, float)
        ///</summary>
        //[TestMethod()]
        public void CB_ConvertHSBToColorTest_04()
        {
            int R = 128, G = 128, B = 128;
            Color c = Color.FromArgb(255, R, G, B);

            testConvertHSB(c.GetHue(), c.GetBrightness(), c.GetSaturation(), R, G, B);
        }

        private static void testConvertHSB(float h, float s, float b, int R, int G, int B)
        {
            Color actual = ColorBuilder.ConvertHSBToColor(h, s, b);
            Color expected = Color.FromArgb(255, R, G, B);
            String message = String.Format("Colors converting ({0:F2}, {1:F2}, {2:F2}) don't match", h, s, b);

            Assert.AreEqual(expected, actual, message);
        }

        #endregion

        /// <summary>
        ///A test for SuggestColors (Color, Color, out Color, out Color)
        ///</summary>
        [TestMethod()]
        public void CB_SuggestColorsTest_01()
        {
            Color ref1 = Color.Brown, ref2 = Color.GreenYellow;
            Color fc, bc;

            for (int i = 0; i < 20; i++)
            {
                ColorBuilder.SuggestColors(ref1, ref2, out fc, out bc);

                Assert.IsTrue(ref1.GetSaturation() <= bc.GetSaturation(), "backward color saturation too low");
                Assert.IsTrue(bc.GetSaturation() <= ref2.GetSaturation(), "backward color saturation too high");
                Assert.IsTrue(ref1.GetBrightness() <= bc.GetBrightness(), "backward color brightness too low");
                Assert.IsTrue(bc.GetBrightness() <= ref2.GetBrightness(), "backward color brightness too high");

                Assert.IsTrue(ref1.GetSaturation() <= fc.GetSaturation(), "forward color saturation too low");
                Assert.IsTrue(fc.GetSaturation() <= ref2.GetSaturation(), "forward color saturation too high");
                Assert.IsTrue(ref1.GetBrightness() <= fc.GetBrightness(), "forward color brightness too low");
                Assert.IsTrue(fc.GetBrightness() <= ref2.GetBrightness(), "forward color brightness too high");

                Assert.IsTrue(bc.GetSaturation() <= fc.GetSaturation(), "saturation not ordered");
                Assert.IsTrue(bc.GetBrightness() <= fc.GetBrightness(), "brightness not ordered");
            }
        }
    }
}

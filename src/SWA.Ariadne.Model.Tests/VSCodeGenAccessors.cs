// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SWA.Ariadne.Model.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Model_DeadEndCheckerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::SWA.Ariadne.Model.DeadEndChecker));
    
    internal SWA_Ariadne_Model_DeadEndCheckerAccessor(global::SWA.Ariadne.Model.DeadEndChecker target) : 
            base(target, m_privateType) {
    }
    
    internal global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor[,] mazeExtension {
        get {
            global::System.Array _ret_cache = ((global::System.Array)(m_privateObject.GetField("mazeExtension")));
            global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor[,] _ret_temp;
            if ((_ret_cache == null)) {
                _ret_temp = null;
            }
            else {
                _ret_temp = ((global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor[,])(System.Array.CreateInstance(typeof(global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor), _ret_cache.GetLength(0), _ret_cache.GetLength(1))));
                int _ret_i0;
                for (_ret_i0 = 0; (_ret_i0 < _ret_temp.GetLength(0)); _ret_i0 = (_ret_i0 + 1)) {
                    int _ret_i1;
                    for (_ret_i1 = 0; (_ret_i1 < _ret_temp.GetLength(1)); _ret_i1 = (_ret_i1 + 1)) {
                        object _ret_i_val = _ret_cache.GetValue(_ret_i0, _ret_i1);
                        global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor _ret_i = null;
                        if ((_ret_i_val != null)) {
                            _ret_i = new global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor(_ret_i_val);
                        }
                        _ret_temp.SetValue(_ret_i, _ret_i0, _ret_i1);
                    }
                }
            }
            global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor[,] ret = _ret_temp;
            return ret;
        }
        set {
            m_privateObject.SetField("mazeExtension", value);
        }
    }
    
    internal void InitializeMazeExtension(global::SWA.Ariadne.Model.Maze maze) {
        object[] args = new object[] {
                maze};
        m_privateObject.Invoke("InitializeMazeExtension", new System.Type[] {
                    typeof(global::SWA.Ariadne.Model.Maze)}, args);
    }
    
    internal void InitializeTrajectoryDistances(global::SWA.Ariadne.Model.Maze maze) {
        object[] args = new object[] {
                maze};
        m_privateObject.Invoke("InitializeTrajectoryDistances", new System.Type[] {
                    typeof(global::SWA.Ariadne.Model.Maze)}, args);
    }
    
    internal void FindNewTrajectories() {
        object[] args = new object[0];
        m_privateObject.Invoke("FindNewTrajectories", new System.Type[0], args);
    }
    
    internal void AddUncertainSquare(global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor sqe, int behindPosition) {
        object sqe_val_target = null;
        if ((sqe != null)) {
            sqe_val_target = sqe.Target;
        }
        object[] args = new object[] {
                sqe_val_target,
                behindPosition};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Model", "SWA.Ariadne.Model.DeadEndChecker+MazeSquareExtension");
        m_privateObject.Invoke("AddUncertainSquare", new System.Type[] {
                    target.ReferencedType,
                    typeof(int)}, args);
    }
    
    internal void ReviveConfirmedSquaresNeighbors() {
        object[] args = new object[0];
        m_privateObject.Invoke("ReviveConfirmedSquaresNeighbors", new System.Type[0], args);
    }
    
    internal bool HarmlessConstellation(global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor sqe) {
        object sqe_val_target = null;
        if ((sqe != null)) {
            sqe_val_target = sqe.Target;
        }
        object[] args = new object[] {
                sqe_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Model", "SWA.Ariadne.Model.DeadEndChecker+MazeSquareExtension");
        bool ret = ((bool)(m_privateObject.Invoke("HarmlessConstellation", new System.Type[] {
                    target.ReferencedType}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Model", "SWA.Ariadne.Model.DeadEndChecker+MazeSquareExtension");
    
    internal SWA_Ariadne_Model_DeadEndChecker_MazeSquareExtensionAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::SWA.Ariadne.Model.MazeSquare extendedSquare {
        get {
            global::SWA.Ariadne.Model.MazeSquare ret = ((global::SWA.Ariadne.Model.MazeSquare)(m_privateObject.GetField("extendedSquare")));
            return ret;
        }
        set {
            m_privateObject.SetField("extendedSquare", value);
        }
    }
    
    internal bool isDeadEnd {
        get {
            bool ret = ((bool)(m_privateObject.GetField("isDeadEnd")));
            return ret;
        }
        set {
            m_privateObject.SetField("isDeadEnd", value);
        }
    }
    
    internal int trajectoryDistance {
        get {
            int ret = ((int)(m_privateObject.GetField("trajectoryDistance")));
            return ret;
        }
        set {
            m_privateObject.SetField("trajectoryDistance", value);
        }
    }
    
    internal static object CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Model", "SWA.Ariadne.Model.DeadEndChecker+MazeSquareExtension", new System.Type[0], args);
        return priv_obj.Target;
    }
    
    public override string ToString() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("ToString", new System.Type[0], args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Logic_LeftHandWalkerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Logic", "SWA.Ariadne.Logic.LeftHandWalker");
    
    internal SWA_Ariadne_Logic_LeftHandWalkerAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static object CreatePrivate(global::SWA.Ariadne.Model.Maze maze, global::SWA.Ariadne.Logic.IMazeDrawer mazeDrawer) {
        object[] args = new object[] {
                maze,
                mazeDrawer};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Logic", "SWA.Ariadne.Logic.LeftHandWalker", new System.Type[] {
                    typeof(global::SWA.Ariadne.Model.Maze),
                    typeof(global::SWA.Ariadne.Logic.IMazeDrawer)}, args);
        return priv_obj.Target;
    }
    
    internal void Solve() {
        object[] args = new object[0];
        m_privateObject.Invoke("Solve", new System.Type[0], args);
    }
    
    internal void Reset() {
        object[] args = new object[0];
        m_privateObject.Invoke("Reset", new System.Type[0], args);
    }

    internal void MakeEfficient()
    {
        object[] args = new object[0];
        m_privateObject.Invoke("MakeEfficient", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Model_MazeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::SWA.Ariadne.Model.Maze));
    
    internal SWA_Ariadne_Model_MazeAccessor(global::SWA.Ariadne.Model.Maze target) : 
            base(target, m_privateType) {
    }
    
    internal int xSize {
        get {
            int ret = ((int)(m_privateObject.GetField("xSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("xSize", value);
        }
    }
    
    internal int ySize {
        get {
            int ret = ((int)(m_privateObject.GetField("ySize")));
            return ret;
        }
        set {
            m_privateObject.SetField("ySize", value);
        }
    }
    
    internal int xStart {
        get {
            int ret = ((int)(m_privateObject.GetField("xStart")));
            return ret;
        }
        set {
            m_privateObject.SetField("xStart", value);
        }
    }
    
    internal int yStart {
        get {
            int ret = ((int)(m_privateObject.GetField("yStart")));
            return ret;
        }
        set {
            m_privateObject.SetField("yStart", value);
        }
    }
    
    internal int xEnd {
        get {
            int ret = ((int)(m_privateObject.GetField("xEnd")));
            return ret;
        }
        set {
            m_privateObject.SetField("xEnd", value);
        }
    }
    
    internal int yEnd {
        get {
            int ret = ((int)(m_privateObject.GetField("yEnd")));
            return ret;
        }
        set {
            m_privateObject.SetField("yEnd", value);
        }
    }
    
    internal global::SWA.Ariadne.Model.Interfaces.WallPosition direction {
        get {
            global::SWA.Ariadne.Model.Interfaces.WallPosition ret = ((global::SWA.Ariadne.Model.Interfaces.WallPosition)(m_privateObject.GetField("direction")));
            return ret;
        }
        set {
            m_privateObject.SetField("direction", value);
        }
    }
    
    internal global::System.Random random {
        get {
            global::System.Random ret = ((global::System.Random)(m_privateObject.GetField("random")));
            return ret;
        }
        set {
            m_privateObject.SetField("random", value);
        }
    }
    
    internal int seed {
        get {
            int ret = ((int)(m_privateObject.GetField("seed")));
            return ret;
        }
        set {
            m_privateObject.SetField("seed", value);
        }
    }
    
    internal global::SWA.Ariadne.Model.MazeSquare[,] squares {
        get {
            global::SWA.Ariadne.Model.MazeSquare[,] ret = ((global::SWA.Ariadne.Model.MazeSquare[,])(m_privateObject.GetField("squares")));
            return ret;
        }
        set {
            m_privateObject.SetField("squares", value);
        }
    }
    
    internal void CreateSquares() {
        object[] args = new object[0];
        m_privateObject.Invoke("CreateSquares", new System.Type[0], args);
    }
    
    internal void BuildMaze() {
        object[] args = new object[0];
        m_privateObject.Invoke("BuildMaze", new System.Type[0], args);
    }
    
    internal void FixBorderWalls() {
        object[] args = new object[0];
        m_privateObject.Invoke("FixBorderWalls", new System.Type[0], args);
    }
    
    internal void FixReservedAreas() {
        object[] args = new object[0];
        m_privateObject.Invoke("FixReservedAreas", new System.Type[0], args);
    }
    
    internal void CloseWalls(int left, int right, int top, int bottom, global::SWA.Ariadne.Model.Interfaces.WallState borderState) {
        object[] args = new object[] {
                left,
                right,
                top,
                bottom,
                borderState};
        m_privateObject.Invoke("CloseWalls", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(global::SWA.Ariadne.Model.Interfaces.WallState)}, args);
    }
    
    internal int CountClosedWalls(global::SWA.Ariadne.Model.MazeSquare sq) {
        object[] args = new object[] {
                sq};
        int ret = ((int)(m_privateObject.Invoke("CountClosedWalls", new System.Type[] {
                    typeof(global::SWA.Ariadne.Model.MazeSquare)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Model_MazeCodeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Model", "SWA.Ariadne.Model.MazeCode");
    
    internal SWA_Ariadne_Model_MazeCodeAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal int SeedLimit {
        get {
            int ret = ((int)(m_privateObject.GetField("SeedLimit")));
            return ret;
        }
        set {
            m_privateObject.SetField("SeedLimit", value);
        }
    }
    
    internal int CodeLength {
        get {
            int ret = ((int)(m_privateObject.GetField("CodeLength")));
            return ret;
        }
        set {
            m_privateObject.SetField("CodeLength", value);
        }
    }
    
    internal int CodeDigitRange {
        get {
            int ret = ((int)(m_privateObject.GetField("CodeDigitRange")));
            return ret;
        }
        set {
            m_privateObject.SetField("CodeDigitRange", value);
        }
    }
    
    internal static int DefaultCodeVersion {
        get {
            int ret = ((int)(m_privateType.GetStaticField("DefaultCodeVersion")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("DefaultCodeVersion", value);
        }
    }
    
    internal int codeVersion {
        get {
            int ret = ((int)(m_privateObject.GetField("codeVersion")));
            return ret;
        }
        set {
            m_privateObject.SetField("codeVersion", value);
        }
    }
    
    internal static global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor[] instance {
        get {
            global::System.Array _ret_cache = ((global::System.Array)(m_privateType.GetStaticField("instance")));
            global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor[] _ret_temp;
            if ((_ret_cache == null)) {
                _ret_temp = null;
            }
            else {
                _ret_temp = ((global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor[])(System.Array.CreateInstance(typeof(global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor), _ret_cache.GetLength(0))));
                int _ret_i0;
                for (_ret_i0 = 0; (_ret_i0 < _ret_temp.GetLength(0)); _ret_i0 = (_ret_i0 + 1)) {
                    object _ret_i_val = _ret_cache.GetValue(_ret_i0);
                    global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor _ret_i = null;
                    if ((_ret_i_val != null)) {
                        _ret_i = new global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor(_ret_i_val);
                    }
                    _ret_temp.SetValue(_ret_i, _ret_i0);
                }
            }
            global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor[] ret = _ret_temp;
            return ret;
        }
        set {
            m_privateType.SetStaticField("instance", value);
        }
    }
    
    internal static object CreatePrivate(int version) {
        object[] args = new object[] {
                version};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Model", "SWA.Ariadne.Model.MazeCode", new System.Type[] {
                    typeof(int)}, args);
        return priv_obj.Target;
    }
    
    internal string Code(global::SWA.Ariadne.Model.Maze maze) {
        object[] args = new object[] {
                maze};
        string ret = ((string)(m_privateObject.Invoke("Code", new System.Type[] {
                    typeof(global::SWA.Ariadne.Model.Maze)}, args)));
        return ret;
    }
    
    internal static int GetCodeVersion(string code) {
        object[] args = new object[] {
                code};
        int ret = ((int)(m_privateType.InvokeStatic("GetCodeVersion", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal void Decode(string code, out int seed, out int xSize, out int ySize) {
        object[] args = new object[] {
                code,
                null,
                null,
                null};
        m_privateObject.Invoke("Decode", new System.Type[] {
                    typeof(string),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType()}, args);
        seed = ((int)(args[1]));
        xSize = ((int)(args[2]));
        ySize = ((int)(args[3]));
    }
    
    internal static void ValidateCodeItemRange(string item, int value, int min, int max) {
        object[] args = new object[] {
                item,
                value,
                min,
                max};
        m_privateType.InvokeStatic("ValidateCodeItemRange", new System.Type[] {
                    typeof(string),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal static global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor Instance(int version) {
        object[] args = new object[] {
                version};
        object _ret_val = m_privateType.InvokeStatic("Instance", new System.Type[] {
                    typeof(int)}, args);
        global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor(_ret_val);
        }
        global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeCodeAccessor ret = _ret;
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Model_MazeDimensionsAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("SWA.Ariadne.Model", "SWA.Ariadne.Model.MazeDimensions");
    
    internal SWA_Ariadne_Model_MazeDimensionsAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static double XYRatio {
        get {
            double ret = ((double)(m_privateType.GetStaticField("XYRatio")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("XYRatio", value);
        }
    }
    
    internal int MinSize {
        get {
            int ret = ((int)(m_privateObject.GetField("MinSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("MinSize", value);
        }
    }
    
    internal int MaxXSize {
        get {
            int ret = ((int)(m_privateObject.GetProperty("MaxXSize")));
            return ret;
        }
    }
    
    internal int xRange {
        get {
            int ret = ((int)(m_privateObject.GetField("xRange")));
            return ret;
        }
        set {
            m_privateObject.SetField("xRange", value);
        }
    }
    
    internal int MaxYSize {
        get {
            int ret = ((int)(m_privateObject.GetProperty("MaxYSize")));
            return ret;
        }
    }
    
    internal int yRange {
        get {
            int ret = ((int)(m_privateObject.GetField("yRange")));
            return ret;
        }
        set {
            m_privateObject.SetField("yRange", value);
        }
    }
    
    internal int MaxBorderDistance {
        get {
            int ret = ((int)(m_privateObject.GetField("MaxBorderDistance")));
            return ret;
        }
        set {
            m_privateObject.SetField("MaxBorderDistance", value);
        }
    }
    
    internal int codeVersion {
        get {
            int ret = ((int)(m_privateObject.GetField("codeVersion")));
            return ret;
        }
        set {
            m_privateObject.SetField("codeVersion", value);
        }
    }
    
    internal static global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor[] instance {
        get {
            global::System.Array _ret_cache = ((global::System.Array)(m_privateType.GetStaticField("instance")));
            global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor[] _ret_temp;
            if ((_ret_cache == null)) {
                _ret_temp = null;
            }
            else {
                _ret_temp = ((global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor[])(System.Array.CreateInstance(typeof(global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor), _ret_cache.GetLength(0))));
                int _ret_i0;
                for (_ret_i0 = 0; (_ret_i0 < _ret_temp.GetLength(0)); _ret_i0 = (_ret_i0 + 1)) {
                    object _ret_i_val = _ret_cache.GetValue(_ret_i0);
                    global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor _ret_i = null;
                    if ((_ret_i_val != null)) {
                        _ret_i = new global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor(_ret_i_val);
                    }
                    _ret_temp.SetValue(_ret_i, _ret_i0);
                }
            }
            global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor[] ret = _ret_temp;
            return ret;
        }
        set {
            m_privateType.SetStaticField("instance", value);
        }
    }
    
    internal static object CreatePrivate(int version) {
        object[] args = new object[] {
                version};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("SWA.Ariadne.Model", "SWA.Ariadne.Model.MazeDimensions", new System.Type[] {
                    typeof(int)}, args);
        return priv_obj.Target;
    }
    
    internal void CalculateDimensions(int version, out int xRange, out int yRange) {
        object[] args = new object[] {
                version,
                null,
                null};
        m_privateObject.Invoke("CalculateDimensions", new System.Type[] {
                    typeof(int),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType()}, args);
        xRange = ((int)(args[1]));
        yRange = ((int)(args[2]));
    }
    
    internal static global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor Instance(int version) {
        object[] args = new object[] {
                version};
        object _ret_val = m_privateType.InvokeStatic("Instance", new System.Type[] {
                    typeof(int)}, args);
        global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor(_ret_val);
        }
        global::SWA.Ariadne.Model.Tests.SWA_Ariadne_Model_MazeDimensionsAccessor ret = _ret;
        return ret;
    }
}
}

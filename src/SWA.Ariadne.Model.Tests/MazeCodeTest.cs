// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using SWA.Ariadne.Model;

namespace SWA.Ariadne.Model.Tests
{
    /// <summary>
    ///This is a test class for SWA.Ariadne.Model.Maze and is intended
    ///to contain all SWA.Ariadne.Model.MazeCode Unit Tests
    ///</summary>
    [TestClass()]
    public class MazeCodeTest
    {
        #region TestContext

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #endregion

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #region Unit Tests

        /// <summary>
        ///A test for Code (Maze)
        ///</summary>
        [TestMethod()]
        public void MC_CodeTest_01()
        {
            string testObject = "MazeCode.Code (version 0)";
            int version = 0;
            string pattern = @"^[A-Z]{4}\.[A-Z]{4}\.[A-Z]{4}$";

            TestCodePattern(testObject, version, pattern);
        }

        /// <summary>
        ///A test for Decode (string, out int, out int, out int)
        ///</summary>
        [DeploymentItem("SWA.Ariadne.Model.dll")]
        [TestMethod()]
        public void MC_DecodeTest_01()
        {
            string testObject = "MazeCode.Decode (version 0)";
            int version = 0;

            TestDecodeIdentity(testObject, version);
        }

        #endregion

        #region Auxiliary methods

        private static void TestDecodeIdentity(string testObject, int version)
        {
            SWA_Ariadne_Model_MazeDimensionsAccessor dimensionsObj = SWA_Ariadne_Model_MazeDimensionsAccessor.Instance(version);
            SWA_Ariadne_Model_MazeCodeAccessor codeObj = SWA_Ariadne_Model_MazeCodeAccessor.Instance(version);

            Random r = new Random();

            for (int nTests = 0; nTests < 100; nTests++)
            {
                int xSize = r.Next(dimensionsObj.MinSize, dimensionsObj.MaxXSize + 1);
                int ySize = r.Next(dimensionsObj.MinSize, dimensionsObj.MaxYSize + 1);
                Maze maze = new Maze(xSize, ySize, version);
                maze.CreateMaze();
                maze.PlaceEndpoints();

                SWA_Ariadne_Model_MazeAccessor accessor = new SWA_Ariadne_Model_MazeAccessor(maze);
                int seed = accessor.seed;
                MazeSquare.WallPosition direction = accessor.direction;
                int xStart = accessor.xStart;
                int yStart = accessor.yStart;
                int xEnd = accessor.xEnd;
                int yEnd = accessor.yEnd;

                string code = maze.Code;

                int seedActual, xSizeActual, ySizeActual, xStartActual, yStartActual, xEndActual, yEndActual;
                MazeSquare.WallPosition directionActual;
                codeObj.Decode(code
                    , out seedActual
                    , out xSizeActual, out ySizeActual
                    , out directionActual
                    , out xStartActual, out yStartActual
                    , out xEndActual, out yEndActual
                    );

                bool ok = true;
                ok &= (seed == seedActual);
                ok &= (xSize == xSizeActual);
                ok &= (ySize == ySizeActual);
                ok &= (direction == directionActual);
                ok &= (xStart == xStartActual);
                ok &= (yStart == yStartActual);
                ok &= (xEnd == xEndActual);
                ok &= (yEnd == yEndActual);

                if (!ok)
                {
                    ok = false;
                }

                Assert.AreEqual(seed, seedActual, testObject + ": seed was not set correctly.");
                Assert.AreEqual(xSize, xSizeActual, testObject + ": xSize was not set correctly.");
                Assert.AreEqual(ySize, ySizeActual, testObject + ": ySize was not set correctly.");
                Assert.AreEqual(xStart, xStartActual, testObject + ": xStart was not set correctly.");
                Assert.AreEqual(yStart, yStartActual, testObject + ": yStart was not set correctly.");
                Assert.AreEqual(xEnd, xEndActual, testObject + ": xEnd was not set correctly.");
                Assert.AreEqual(yEnd, yEndActual, testObject + ": yEnd was not set correctly.");
            }
        }

        private static void TestCodePattern(string testObject, int version, string pattern)
        {
            SWA_Ariadne_Model_MazeDimensionsAccessor dimensionsObj = SWA_Ariadne_Model_MazeDimensionsAccessor.Instance(version);
            SWA_Ariadne_Model_MazeCodeAccessor codeObj = SWA_Ariadne_Model_MazeCodeAccessor.Instance(version);
            
            Regex rx = new Regex(pattern);

            Random r = new Random();
            int minSize = dimensionsObj.MinSize;
            int maxXSize = dimensionsObj.MaxXSize;
            int maxYSize = dimensionsObj.MaxYSize;

            for (int nTests = 0; nTests < 100; nTests++)
            {
                int xSize = r.Next(minSize, maxXSize + 1);
                int ySize = r.Next(minSize, maxYSize + 1);
                Maze maze = new Maze(xSize, ySize, version);
                maze.CreateMaze();
                maze.PlaceEndpoints();

                string codeValue = codeObj.Code(maze);

                Match m = rx.Match(codeValue);

                Assert.IsTrue(m.Success, testObject + " does not match expected pattern: " + pattern);
            }
        }

        #endregion
    }
}

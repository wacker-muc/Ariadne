// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SWA.Ariadne.Gui.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Gui_OptionsDialogAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::SWA.Ariadne.Gui.Dialogs.OptionsDialog));
    
    internal SWA_Ariadne_Gui_OptionsDialogAccessor(global::SWA.Ariadne.Gui.Dialogs.OptionsDialog target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.ComponentModel.IContainer components {
        get {
            global::System.ComponentModel.IContainer ret = ((global::System.ComponentModel.IContainer)(m_privateObject.GetField("components")));
            return ret;
        }
        set {
            m_privateObject.SetField("components", value);
        }
    }
    
    internal global::System.Windows.Forms.Button buttonOK {
        get {
            global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetField("buttonOK")));
            return ret;
        }
        set {
            m_privateObject.SetField("buttonOK", value);
        }
    }
    
    internal global::System.Windows.Forms.Button buttonCancel {
        get {
            global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetField("buttonCancel")));
            return ret;
        }
        set {
            m_privateObject.SetField("buttonCancel", value);
        }
    }
    
    internal global::System.Windows.Forms.Label labelCopyright {
        get {
            global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetField("labelCopyright")));
            return ret;
        }
        set {
            m_privateObject.SetField("labelCopyright", value);
        }
    }
    
    internal global::System.Windows.Forms.TabControl tabControl1 {
        get {
            global::System.Windows.Forms.TabControl ret = ((global::System.Windows.Forms.TabControl)(m_privateObject.GetField("tabControl1")));
            return ret;
        }
        set {
            m_privateObject.SetField("tabControl1", value);
        }
    }
    
    internal global::System.Windows.Forms.TabPage tabPage1 {
        get {
            global::System.Windows.Forms.TabPage ret = ((global::System.Windows.Forms.TabPage)(m_privateObject.GetField("tabPage1")));
            return ret;
        }
        set {
            m_privateObject.SetField("tabPage1", value);
        }
    }
    
    internal global::System.Windows.Forms.CheckBox checkBoxEfficientSolvers {
        get {
            global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetField("checkBoxEfficientSolvers")));
            return ret;
        }
        set {
            m_privateObject.SetField("checkBoxEfficientSolvers", value);
        }
    }
    
    internal global::System.Windows.Forms.TextBox textBoxStepsPerSecond {
        get {
            global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetField("textBoxStepsPerSecond")));
            return ret;
        }
        set {
            m_privateObject.SetField("textBoxStepsPerSecond", value);
        }
    }
    
    internal global::System.Windows.Forms.Label label1 {
        get {
            global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetField("label1")));
            return ret;
        }
        set {
            m_privateObject.SetField("label1", value);
        }
    }
    
    internal global::System.Windows.Forms.CheckBox checkBoxDetailsBox {
        get {
            global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetField("checkBoxDetailsBox")));
            return ret;
        }
        set {
            m_privateObject.SetField("checkBoxDetailsBox", value);
        }
    }
    
    internal global::System.Windows.Forms.CheckBox checkBoxBlinking {
        get {
            global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetField("checkBoxBlinking")));
            return ret;
        }
        set {
            m_privateObject.SetField("checkBoxBlinking", value);
        }
    }
    
    internal global::System.Windows.Forms.TabPage tabPage2 {
        get {
            global::System.Windows.Forms.TabPage ret = ((global::System.Windows.Forms.TabPage)(m_privateObject.GetField("tabPage2")));
            return ret;
        }
        set {
            m_privateObject.SetField("tabPage2", value);
        }
    }
    
    internal global::System.Windows.Forms.NumericUpDown imageMinSizeNumericUpDown {
        get {
            global::System.Windows.Forms.NumericUpDown ret = ((global::System.Windows.Forms.NumericUpDown)(m_privateObject.GetField("imageMinSizeNumericUpDown")));
            return ret;
        }
        set {
            m_privateObject.SetField("imageMinSizeNumericUpDown", value);
        }
    }
    
    internal global::System.Windows.Forms.Label labelImagesMinSize {
        get {
            global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetField("labelImagesMinSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("labelImagesMinSize", value);
        }
    }
    
    internal global::System.Windows.Forms.NumericUpDown imageMaxSizeNumericUpDown {
        get {
            global::System.Windows.Forms.NumericUpDown ret = ((global::System.Windows.Forms.NumericUpDown)(m_privateObject.GetField("imageMaxSizeNumericUpDown")));
            return ret;
        }
        set {
            m_privateObject.SetField("imageMaxSizeNumericUpDown", value);
        }
    }
    
    internal global::System.Windows.Forms.Label labelImagesMaxSize {
        get {
            global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetField("labelImagesMaxSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("labelImagesMaxSize", value);
        }
    }
    
    internal global::System.Windows.Forms.NumericUpDown imageNumberNumericUpDown {
        get {
            global::System.Windows.Forms.NumericUpDown ret = ((global::System.Windows.Forms.NumericUpDown)(m_privateObject.GetField("imageNumberNumericUpDown")));
            return ret;
        }
        set {
            m_privateObject.SetField("imageNumberNumericUpDown", value);
        }
    }
    
    internal global::System.Windows.Forms.Label labelImagesNumber {
        get {
            global::System.Windows.Forms.Label ret = ((global::System.Windows.Forms.Label)(m_privateObject.GetField("labelImagesNumber")));
            return ret;
        }
        set {
            m_privateObject.SetField("labelImagesNumber", value);
        }
    }
    
    internal global::System.Windows.Forms.Button selectImageFolderButton {
        get {
            global::System.Windows.Forms.Button ret = ((global::System.Windows.Forms.Button)(m_privateObject.GetField("selectImageFolderButton")));
            return ret;
        }
        set {
            m_privateObject.SetField("selectImageFolderButton", value);
        }
    }
    
    internal global::System.Windows.Forms.TextBox imageFolderTextBox {
        get {
            global::System.Windows.Forms.TextBox ret = ((global::System.Windows.Forms.TextBox)(m_privateObject.GetField("imageFolderTextBox")));
            return ret;
        }
        set {
            m_privateObject.SetField("imageFolderTextBox", value);
        }
    }
    
    internal global::System.Windows.Forms.FolderBrowserDialog imageFolderBrowserDialog {
        get {
            global::System.Windows.Forms.FolderBrowserDialog ret = ((global::System.Windows.Forms.FolderBrowserDialog)(m_privateObject.GetField("imageFolderBrowserDialog")));
            return ret;
        }
        set {
            m_privateObject.SetField("imageFolderBrowserDialog", value);
        }
    }
    
    internal global::System.Windows.Forms.TabPage tabPage3 {
        get {
            global::System.Windows.Forms.TabPage ret = ((global::System.Windows.Forms.TabPage)(m_privateObject.GetField("tabPage3")));
            return ret;
        }
        set {
            m_privateObject.SetField("tabPage3", value);
        }
    }
    
    internal global::System.Windows.Forms.CheckBox checkBoxOutlineShapes {
        get {
            global::System.Windows.Forms.CheckBox ret = ((global::System.Windows.Forms.CheckBox)(m_privateObject.GetField("checkBoxOutlineShapes")));
            return ret;
        }
        set {
            m_privateObject.SetField("checkBoxOutlineShapes", value);
        }
    }
    
    internal void OptionsDialog_Load(object sender, global::System.EventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("OptionsDialog_Load", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
    }
    
    internal void buttonOK_Click(object sender, global::System.EventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("buttonOK_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
    }
    
    internal void buttonCancel_Click(object sender, global::System.EventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("buttonCancel_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
    }
    
    internal void selectImageFolderButton_Click(object sender, global::System.EventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("selectImageFolderButton_Click", new System.Type[] {
                    typeof(object),
                    typeof(global::System.EventArgs)}, args);
    }
    
    internal void LoadSettings() {
        object[] args = new object[0];
        m_privateObject.Invoke("LoadSettings", new System.Type[0], args);
    }
    
    internal void SaveSettings() {
        object[] args = new object[0];
        m_privateObject.Invoke("SaveSettings", new System.Type[0], args);
    }
    
    internal void Dispose(bool disposing) {
        object[] args = new object[] {
                disposing};
        m_privateObject.Invoke("Dispose", new System.Type[] {
                    typeof(bool)}, args);
    }
    
    internal void InitializeComponent() {
        object[] args = new object[0];
        m_privateObject.Invoke("InitializeComponent", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Gui_Mazes_ContourImageAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::SWA.Ariadne.Gui.Mazes.ContourImage));
    
    internal SWA_Ariadne_Gui_Mazes_ContourImageAccessor(global::SWA.Ariadne.Gui.Mazes.ContourImage target) : 
            base(target, m_privateType) {
    }
    
    internal static int ContourDistance {
        get {
            int ret = ((int)(m_privateType.GetStaticField("ContourDistance")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ContourDistance", value);
        }
    }
    
    internal static int BlurDistance {
        get {
            int ret = ((int)(m_privateType.GetStaticField("BlurDistance")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("BlurDistance", value);
        }
    }
    
    internal static int NbE {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbE", value);
        }
    }
    
    internal static int NbNE {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbNE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbNE", value);
        }
    }
    
    internal static int NbN {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbN")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbN", value);
        }
    }
    
    internal static int NbNW {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbNW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbNW", value);
        }
    }
    
    internal static int NbW {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbW", value);
        }
    }
    
    internal static int NbSW {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbSW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbSW", value);
        }
    }
    
    internal static int NbS {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbS")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbS", value);
        }
    }
    
    internal static int NbSE {
        get {
            int ret = ((int)(m_privateType.GetStaticField("NbSE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbSE", value);
        }
    }
    
    internal static int[] NbDX {
        get {
            int[] ret = ((int[])(m_privateType.GetStaticField("NbDX")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbDX", value);
        }
    }
    
    internal static int[] NbDY {
        get {
            int[] ret = ((int[])(m_privateType.GetStaticField("NbDY")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NbDY", value);
        }
    }
    
    internal static int[,] Nb {
        get {
            int[,] ret = ((int[,])(m_privateType.GetStaticField("Nb")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("Nb", value);
        }
    }
    
    internal static ushort E {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("E")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("E", value);
        }
    }
    
    internal static ushort N {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("N")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("N", value);
        }
    }
    
    internal static ushort W {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("W")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("W", value);
        }
    }
    
    internal static ushort S {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("S")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("S", value);
        }
    }
    
    internal static ushort NE {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("NE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NE", value);
        }
    }
    
    internal static ushort NW {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("NW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NW", value);
        }
    }
    
    internal static ushort SW {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("SW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SW", value);
        }
    }
    
    internal static ushort SE {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("SE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SE", value);
        }
    }
    
    internal static ushort C {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("C")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("C", value);
        }
    }
    
    internal static ushort QNW {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("QNW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("QNW", value);
        }
    }
    
    internal static ushort QNE {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("QNE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("QNE", value);
        }
    }
    
    internal static ushort QSW {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("QSW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("QSW", value);
        }
    }
    
    internal static ushort QSE {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("QSE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("QSE", value);
        }
    }
    
    internal static ushort LH {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("LH")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("LH", value);
        }
    }
    
    internal static ushort LV {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("LV")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("LV", value);
        }
    }
    
    internal static ushort HN {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("HN")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("HN", value);
        }
    }
    
    internal static ushort HS {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("HS")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("HS", value);
        }
    }
    
    internal static ushort HE {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("HE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("HE", value);
        }
    }
    
    internal static ushort HW {
        get {
            ushort ret = ((ushort)(m_privateType.GetStaticField("HW")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("HW", value);
        }
    }
    
    internal static int GetBlurDistance(global::System.Drawing.Color backgroundColor) {
        object[] args = new object[] {
                backgroundColor};
        int ret = ((int)(m_privateType.InvokeStatic("GetBlurDistance", new System.Type[] {
                    typeof(global::System.Drawing.Color)}, args)));
        return ret;
    }
    
    internal static int GetFrameWidth(global::System.Drawing.Color backgroundColor) {
        object[] args = new object[] {
                backgroundColor};
        int ret = ((int)(m_privateType.InvokeStatic("GetFrameWidth", new System.Type[] {
                    typeof(global::System.Drawing.Color)}, args)));
        return ret;
    }
    
    internal static global::System.Drawing.Color GuessBackgroundColor(global::System.Drawing.Bitmap image, float fuzziness, out float share) {
        object[] args = new object[] {
                image,
                fuzziness,
                null};
        global::System.Drawing.Color ret = ((global::System.Drawing.Color)(m_privateType.InvokeStatic("GuessBackgroundColor", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(float),
                    typeof(float).MakeByRefType()}, args)));
        share = ((float)(args[2]));
        return ret;
    }
    
    internal static global::System.Drawing.Bitmap Copy(global::System.Drawing.Image image, global::System.Drawing.Color backgroundColor) {
        object[] args = new object[] {
                image,
                backgroundColor};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("Copy", new System.Type[] {
                    typeof(global::System.Drawing.Image),
                    typeof(global::System.Drawing.Color)}, args)));
        return ret;
    }
    
    internal static global::System.Drawing.Bitmap GetMask(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox, int algorithm) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null,
                algorithm};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType(),
                    typeof(int)}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
    
    internal static float ColorDistance(global::System.Drawing.Color col1, global::System.Drawing.Color col2) {
        object[] args = new object[] {
                col1,
                col2};
        float ret = ((float)(m_privateType.InvokeStatic("ColorDistance", new System.Type[] {
                    typeof(global::System.Drawing.Color),
                    typeof(global::System.Drawing.Color)}, args)));
        return ret;
    }
    
    internal static void ApplyMask(global::System.Drawing.Bitmap image, global::System.Drawing.Bitmap mask) {
        object[] args = new object[] {
                image,
                mask};
        m_privateType.InvokeStatic("ApplyMask", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Bitmap)}, args);
    }
    
    internal static global::System.Drawing.Bitmap Crop(global::System.Drawing.Bitmap image, global::System.Drawing.Rectangle srcRect) {
        object[] args = new object[] {
                image,
                srcRect};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("Crop", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Rectangle)}, args)));
        return ret;
    }
    
    internal static global::System.Drawing.Bitmap GetMask_BlockScan(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask_BlockScan", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType()}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
    
    internal static global::System.Drawing.Bitmap GetMask_CompleteScan(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask_CompleteScan", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType()}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
    
    internal static int InfluenceD2(int nbL, int nbR, int x, int y) {
        object[] args = new object[] {
                nbL,
                nbR,
                x,
                y};
        int ret = ((int)(m_privateType.InvokeStatic("InfluenceD2", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static int BorderLimitType(int nbL, int nbR, int x, int y) {
        object[] args = new object[] {
                nbL,
                nbR,
                x,
                y};
        int ret = ((int)(m_privateType.InvokeStatic("BorderLimitType", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static void PrepareInfluenceRegions(int influenceRange) {
        object[] args = new object[] {
                influenceRange};
        m_privateType.InvokeStatic("PrepareInfluenceRegions", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal static global::System.Drawing.Bitmap GetMask_ContourScan(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask_ContourScan", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType()}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
    
    internal static bool ScanObject(global::System.Drawing.Bitmap image, int x0, int y0, global::System.Drawing.Color backgroundColor, float fuzziness, int[,] dist2ToImage, System.Collections.Generic.List<int>[] contourXs, System.Collections.Generic.List<int>[] borderXs, System.Collections.Generic.List<bool>[] borderXsLR) {
        object[] args = new object[] {
                image,
                x0,
                y0,
                backgroundColor,
                fuzziness,
                dist2ToImage,
                contourXs,
                borderXs,
                borderXsLR};
        bool ret = ((bool)(m_privateType.InvokeStatic("ScanObject", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(int),
                    typeof(int),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(int).MakeArrayType(2),
                    typeof(System.Collections.Generic.List<int>).MakeArrayType(),
                    typeof(System.Collections.Generic.List<int>).MakeArrayType(),
                    typeof(System.Collections.Generic.List<bool>).MakeArrayType()}, args)));
        return ret;
    }
    
    internal static void InitializeDist2ToImage(int width, int height, out int[,] dist2ToImage) {
        object[] args = new object[] {
                width,
                height,
                null};
        m_privateType.InvokeStatic("InitializeDist2ToImage", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeArrayType(2).MakeByRefType()}, args);
        dist2ToImage = ((int[,])(args[2]));
    }
    
    internal static void InitializeScanLines(int width, int height, out System.Collections.Generic.List<int>[] contourXs, out System.Collections.Generic.List<int>[] borderXs, out System.Collections.Generic.List<bool>[] borderXsLR) {
        object[] args = new object[] {
                width,
                height,
                null,
                null,
                null};
        m_privateType.InvokeStatic("InitializeScanLines", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(System.Collections.Generic.List<int>).MakeArrayType().MakeByRefType(),
                    typeof(System.Collections.Generic.List<int>).MakeArrayType().MakeByRefType(),
                    typeof(System.Collections.Generic.List<bool>).MakeArrayType().MakeByRefType()}, args);
        contourXs = ((System.Collections.Generic.List<int>[])(args[2]));
        borderXs = ((System.Collections.Generic.List<int>[])(args[3]));
        borderXsLR = ((System.Collections.Generic.List<bool>[])(args[4]));
    }
    
    internal static void InsertContourPoint(System.Collections.Generic.List<int> contourX, int x) {
        object[] args = new object[] {
                contourX,
                x};
        m_privateType.InvokeStatic("InsertContourPoint", new System.Type[] {
                    typeof(System.Collections.Generic.List<int>),
                    typeof(int)}, args);
    }
    
    internal static void InsertBorderPoint(System.Collections.Generic.List<int> borderX, System.Collections.Generic.List<bool> borderLR, int x, bool leftOrRight) {
        object[] args = new object[] {
                borderX,
                borderLR,
                x,
                leftOrRight};
        m_privateType.InvokeStatic("InsertBorderPoint", new System.Type[] {
                    typeof(System.Collections.Generic.List<int>),
                    typeof(System.Collections.Generic.List<bool>),
                    typeof(int),
                    typeof(bool)}, args);
    }
    
    internal static void EliminateOverlaps(System.Collections.Generic.List<int>[] borderXs, System.Collections.Generic.List<bool>[] borderXsLR) {
        object[] args = new object[] {
                borderXs,
                borderXsLR};
        m_privateType.InvokeStatic("EliminateOverlaps", new System.Type[] {
                    typeof(System.Collections.Generic.List<int>).MakeArrayType(),
                    typeof(System.Collections.Generic.List<bool>).MakeArrayType()}, args);
    }
    
    internal static int EliminateInsideRegions(System.Collections.Generic.List<int>[] borderXs, System.Collections.Generic.List<bool>[] borderXsLR, int y0, int sy) {
        object[] args = new object[] {
                borderXs,
                borderXsLR,
                y0,
                sy};
        int ret = ((int)(m_privateType.InvokeStatic("EliminateInsideRegions", new System.Type[] {
                    typeof(System.Collections.Generic.List<int>).MakeArrayType(),
                    typeof(System.Collections.Generic.List<bool>).MakeArrayType(),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static void LeftNeighbor(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, int x, int y, int nbR, out int nbL, out int xL, out int yL) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                x,
                y,
                nbR,
                null,
                null,
                null};
        m_privateType.InvokeStatic("LeftNeighbor", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType()}, args);
        nbL = ((int)(args[6]));
        xL = ((int)(args[7]));
        yL = ((int)(args[8]));
    }
    
    internal static void RightNeighbor(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, int x, int y, int nbL, out int nbR, out int xR, out int yR) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                x,
                y,
                nbL,
                null,
                null,
                null};
        m_privateType.InvokeStatic("RightNeighbor", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType()}, args);
        nbR = ((int)(args[6]));
        xR = ((int)(args[7]));
        yR = ((int)(args[8]));
    }
    
    internal static void FillOutside(global::System.Drawing.Graphics g, global::System.Drawing.Color color, System.Collections.Generic.List<int>[] borderXs) {
        object[] args = new object[] {
                g,
                color,
                borderXs};
        m_privateType.InvokeStatic("FillOutside", new System.Type[] {
                    typeof(global::System.Drawing.Graphics),
                    typeof(global::System.Drawing.Color),
                    typeof(System.Collections.Generic.List<int>).MakeArrayType()}, args);
    }
    
    internal static void FillOutside_Simple(global::System.Drawing.Graphics g, global::System.Drawing.Color color, System.Collections.Generic.List<int>[] borderXs) {
        object[] args = new object[] {
                g,
                color,
                borderXs};
        m_privateType.InvokeStatic("FillOutside_Simple", new System.Type[] {
                    typeof(global::System.Drawing.Graphics),
                    typeof(global::System.Drawing.Color),
                    typeof(System.Collections.Generic.List<int>).MakeArrayType()}, args);
    }
    
    internal static global::System.Drawing.Bitmap GetMask_OutlineScanA(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask_OutlineScanA", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType()}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
    
    internal static global::System.Drawing.Bitmap GetMask_OutlineScanB(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask_OutlineScanB", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType()}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
    
    internal static void ScanHemisphere(ushort[,] pattern, ushort hMask, ushort hPattern, int x0, int x1, int y1, int y0, int[,] dist2ToImage, int dist) {
        object[] args = new object[] {
                pattern,
                hMask,
                hPattern,
                x0,
                x1,
                y1,
                y0,
                dist2ToImage,
                dist};
        m_privateType.InvokeStatic("ScanHemisphere", new System.Type[] {
                    typeof(ushort).MakeArrayType(2),
                    typeof(ushort),
                    typeof(ushort),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeArrayType(2),
                    typeof(int)}, args);
    }
    
    internal static void ScanOctantsAndDiagonal(ushort[,] pattern, ushort qMask, int x0, int x1, int y0, int y1, int[,] dist2ToImage, int dist) {
        object[] args = new object[] {
                pattern,
                qMask,
                x0,
                x1,
                y0,
                y1,
                dist2ToImage,
                dist};
        m_privateType.InvokeStatic("ScanOctantsAndDiagonal", new System.Type[] {
                    typeof(ushort).MakeArrayType(2),
                    typeof(ushort),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeArrayType(2),
                    typeof(int)}, args);
    }
    
    internal static void ScanQuadrant(ushort[,] pattern, ushort qMask, int x0, int x1, int y0, int y1, int[,] dist2ToImage, int dist) {
        object[] args = new object[] {
                pattern,
                qMask,
                x0,
                x1,
                y0,
                y1,
                dist2ToImage,
                dist};
        m_privateType.InvokeStatic("ScanQuadrant", new System.Type[] {
                    typeof(ushort).MakeArrayType(2),
                    typeof(ushort),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeArrayType(2),
                    typeof(int)}, args);
    }
    
    internal static void ScanDiagonal(ushort[,] pattern, ushort qMask, int x0, int x1, int y0, int y1, int[,] dist2ToImage, int dist) {
        object[] args = new object[] {
                pattern,
                qMask,
                x0,
                x1,
                y0,
                y1,
                dist2ToImage,
                dist};
        m_privateType.InvokeStatic("ScanDiagonal", new System.Type[] {
                    typeof(ushort).MakeArrayType(2),
                    typeof(ushort),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int).MakeArrayType(2),
                    typeof(int)}, args);
    }
    
    internal static void ExtractPattern(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, ushort[,] pattern, int[,] dist2ToImage) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                pattern,
                dist2ToImage};
        m_privateType.InvokeStatic("ExtractPattern", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(ushort).MakeArrayType(2),
                    typeof(int).MakeArrayType(2)}, args);
    }
    
    internal static void NormalizePattern(ushort[,] pattern) {
        object[] args = new object[] {
                pattern};
        m_privateType.InvokeStatic("NormalizePattern", new System.Type[] {
                    typeof(ushort).MakeArrayType(2)}, args);
    }
    
    internal static global::System.Drawing.Bitmap GetMask_SimpleScan(global::System.Drawing.Bitmap image, global::System.Drawing.Color backgroundColor, float fuzziness, out global::System.Drawing.Rectangle boundingBox) {
        object[] args = new object[] {
                image,
                backgroundColor,
                fuzziness,
                null};
        global::System.Drawing.Bitmap ret = ((global::System.Drawing.Bitmap)(m_privateType.InvokeStatic("GetMask_SimpleScan", new System.Type[] {
                    typeof(global::System.Drawing.Bitmap),
                    typeof(global::System.Drawing.Color),
                    typeof(float),
                    typeof(global::System.Drawing.Rectangle).MakeByRefType()}, args)));
        boundingBox = ((global::System.Drawing.Rectangle)(args[3]));
        return ret;
    }
}
}

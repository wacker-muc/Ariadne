// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using SWA.Ariadne.Model;

namespace SWA.Ariadne.Model.Tests
{
    /// <summary>
    ///This is a test class for SWA.Ariadne.Model.Maze and is intended
    ///to contain all SWA.Ariadne.Model.Maze Unit Tests
    ///</summary>
    [TestClass()]
    public class MazeTest
    {
        #region TestContext

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #endregion

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #region Unit Tests

        #region Constructor Tests

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_size_01()
        {
            string testObject = "Maze.Constructor(size)-01-small";
            int xSize = 40;
            int ySize = 40;

            ConstructorTestInsideBounds(testObject, xSize, ySize);
        }

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_size_02()
        {
            string testObject = "Maze.Constructor(size)-02-max";
            int xSize = int.MaxValue;
            int ySize = int.MaxValue;
            int xSizeExpected = MazeDimensions.MaxXSize;
            int ySizeExpected = MazeDimensions.MaxYSize;

            ConstructorTestOutsideBounds(testObject, xSize, ySize, xSizeExpected, ySizeExpected);
        }

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_size_03()
        {
            string testObject = "Maze.Constructor(size)-03-large";

            // screen dimensions: 1400 x 1050
            int xSize = (1400 - 7) / 5;
            int ySize = (1050 - 7) / 5;

            ConstructorTestInsideBounds(testObject, xSize, ySize);
        }

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_size_04()
        {
            string testObject = "Maze.Constructor(size)-03-huge";
            int xSize = ((2 * 1024 - 7) / 6);
            int ySize = ((2 * 768 - 7) / 6);

            ConstructorTestInsideBounds(testObject, xSize, ySize);
        }

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_size_05()
        {
            string testObject = "Maze.Constructor(size)-05-min";
            int xSize = 0;
            int ySize = 0;
            int xSizeExpected = MazeDimensions.MinSize;
            int ySizeExpected = MazeDimensions.MinSize;

            ConstructorTestOutsideBounds(testObject, xSize, ySize, xSizeExpected, ySizeExpected);
        }

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_code_01()
        {
            string testObject = "Maze.Constructor(string)-01";

            Maze template = new Maze(87, 34);
            template.CreateMaze();
            template.PlaceEndpoints();

            string templateCode = template.Code;

            Maze target = new Maze(templateCode);
            target.CreateMaze();
            target.PlaceEndpoints();

            string targetCode = target.Code;

            Assert.AreEqual(templateCode, targetCode, testObject + ": Code differs");
            Assert.IsTrue(template.StartSquare.XPos == target.StartSquare.XPos
                && template.StartSquare.YPos == target.StartSquare.YPos,
                testObject + ": StartSquare differs");
            Assert.IsTrue(template.EndSquare.XPos == target.EndSquare.XPos
                && template.EndSquare.YPos == target.EndSquare.YPos,
                testObject + ": EndSquare differs");
        }

        /// <summary>
        ///A test for Maze (string)
        ///</summary>
        [TestMethod()]
        public void M_ConstructorTest_code_02()
        {
            string testObject = "Maze.Constructor(string)-02";

            // These are a few codes of actual mazes.
            CreateMazeTest(testObject, "FCGC.OIUA.JZRX");
            CreateMazeTest(testObject, "KWOF.WDEI.TGGD");
            CreateMazeTest(testObject, "FNYK.QJEA.AJFL");
            CreateMazeTest(testObject, "OKRQ.YJFO.KQUN");
        }

        private static void CreateMazeTest(string testObject, string mazeCode)
        {
            Maze maze = new Maze(mazeCode);
            maze.CreateMaze();
            //maze.PlaceEndpoints();
            Assert.AreEqual(mazeCode, maze.Code, testObject + ": wrong code");
        }

        #endregion

        #region Code and Decode Unit Tests

        /// <summary>
        ///A test for Code
        ///</summary>
        [TestMethod()]
        public void M_CodeTest_01()
        {
            string testObject = "Maze.Code";

            Random r = new Random();

            string pattern = @"^[A-Z]{4}\.[A-Z]{4}\.[A-Z]{4}$";
            Regex rx = new Regex(pattern);

            for (int nTests = 0; nTests < 100; nTests++)
            {
                int xSize = r.Next(MazeDimensions.MinSize, MazeDimensions.MaxXSize + 1);
                int ySize = r.Next(MazeDimensions.MinSize, MazeDimensions.MaxYSize + 1);
                Maze target = new Maze(xSize, ySize);
                target.CreateMaze();
                target.PlaceEndpoints();

                string codeValue = target.Code;

                Match m = rx.Match(codeValue);

                Assert.IsTrue(m.Success, testObject + " does not match expected pattern: " + pattern);
            }
        }

        /// <summary>
        ///A test for Decode (string, out int, out int, out int)
        ///</summary>
        [DeploymentItem("SWA.Ariadne.Model.dll")]
        [TestMethod()]
        public void M_DecodeTest_01()
        {
            string testObject = "Maze.Decode";

            Random r = new Random();

            for (int nTests = 0; nTests < 100; nTests++)
            {
                int xSize = r.Next(MazeDimensions.MinSize, MazeDimensions.MaxXSize + 1);
                int ySize = r.Next(MazeDimensions.MinSize, MazeDimensions.MaxYSize + 1);
                Maze target = new Maze(xSize, ySize);
                target.CreateMaze();
                target.PlaceEndpoints();

                SWA_Ariadne_Model_MazeAccessor accessor = new SWA_Ariadne_Model_MazeAccessor(target);
                int seed = accessor.seed;
                MazeSquare.WallPosition direction = accessor.direction;
                int xStart = accessor.xStart;
                int yStart = accessor.yStart;
                int xEnd = accessor.xEnd;
                int yEnd = accessor.yEnd;

                string code = target.Code;

                int seedActual, xSizeActual, ySizeActual, xStartActual, yStartActual, xEndActual, yEndActual;
                MazeSquare.WallPosition directionActual;
                MazeCode.Decode(code
                    , out seedActual
                    , out xSizeActual, out ySizeActual
                    , out directionActual
                    , out xStartActual, out yStartActual
                    , out xEndActual, out yEndActual
                    );

                bool ok = true;
                ok &= (seed == seedActual);
                ok &= (xSize == xSizeActual);
                ok &= (ySize == ySizeActual);
                ok &= (direction == directionActual);
                ok &= (xStart == xStartActual);
                ok &= (yStart == yStartActual);
                ok &= (xEnd == xEndActual);
                ok &= (yEnd == yEndActual);

                if (!ok)
                {
                    ok = false;
                }

                Assert.AreEqual(seed, seedActual, testObject + ": seed was not set correctly.");
                Assert.AreEqual(xSize, xSizeActual, testObject + ": xSize was not set correctly.");
                Assert.AreEqual(ySize, ySizeActual, testObject + ": ySize was not set correctly.");
                Assert.AreEqual(xStart, xStartActual, testObject + ": xStart was not set correctly.");
                Assert.AreEqual(yStart, yStartActual, testObject + ": yStart was not set correctly.");
                Assert.AreEqual(xEnd, xEndActual, testObject + ": xEnd was not set correctly.");
                Assert.AreEqual(yEnd, yEndActual, testObject + ": yEnd was not set correctly.");
            }
        }

        #endregion

        #region Unit Tests for MaxXSize and MaxYSize

        /// <summary>
        ///A test for MaxXSize and MaxYSize
        ///</summary>
        [DeploymentItem("SWA.Ariadne.Model.dll")]
        [TestMethod()]
        public void M_MaxSizeTest_01()
        {
            string testObject = "Maze.MaxXSize and Maze.MaxYSize";

            // simulate the multiplications executed in Maze.Code:

            double f1 = MazeCode.SeedLimit;
            double f2 = MazeDimensions.MaxXSize - MazeDimensions.MinSize + 1;
            double f3 = MazeDimensions.MaxYSize - MazeDimensions.MinSize + 1;
            double f4 = MazeDimensions.MaxBorderDistance + 1;
            double f5 = MazeDimensions.MaxBorderDistance + 1;
            double f6 = MazeDimensions.MaxXSize + 1;
            double f7 = MazeDimensions.MaxXSize + 1;
            double f8 = MazeSquare.WP_NUM;

            double maxCodeValue = (f1 * f2 * f3 * f4 * f5 * f6 * f7 * f8) - 1;
            double codeRange = Math.Pow(MazeCode.CodeDigitRange, MazeCode.CodeLength);

            Assert.IsTrue(maxCodeValue < codeRange,
                testObject
                + ": resulting Code would exceed the Code range: "
                + maxCodeValue.ToString("#,##0") + " >= "
                + codeRange.ToString("#,##0")
                );
            Assert.IsTrue(codeRange < long.MaxValue,
                testObject
                + ": Code range would exceed an Int64 representation: "
                + codeRange.ToString("#,##0") + " >= "
                + long.MaxValue.ToString("#,##0")
                );
        }

        /// <summary>
        ///A test for MaxXSize
        ///</summary>
        [DeploymentItem("SWA.Ariadne.Model.dll")]
        [TestMethod()]
        public void M_MaxSizeTest_02()
        {
            string testObject = "Maze.MaxXSize";

            int expected = 341; // manually calculated
            int actual = MazeDimensions.MaxXSize;

            Assert.AreEqual(expected, actual, testObject + ": wrong value");
        }

        /// <summary>
        ///A test for MaxYSize
        ///</summary>
        [DeploymentItem("SWA.Ariadne.Model.dll")]
        [TestMethod()]
        public void M_MaxSizeTest_03()
        {
            string testObject = "Maze.MaxYSize";

            int expected = 255; // manually calculated
            int actual = MazeDimensions.MaxYSize;

            Assert.AreEqual(expected, actual, testObject + ": wrong value");
        }

        #endregion

        #endregion

        #region Auxiliary methods

        private static void ConstructorTestInsideBounds(string testObject, int xSize, int ySize)
        {
            Maze target = new Maze(xSize, ySize);

            Assert.AreEqual(xSize, target.XSize, testObject + ": wrong XSize");
            Assert.AreEqual(ySize, target.YSize, testObject + ": wrong YSize");
        }

        private static void ConstructorTestOutsideBounds(string testObject, int xSize, int ySize, int xSizeExpected, int ySizeExpected)
        {
            Maze target = new Maze(xSize, ySize);

            Assert.AreEqual(xSizeExpected, target.XSize, testObject + ": wrong XSize");
            Assert.AreEqual(ySizeExpected, target.YSize, testObject + ": wrong YSize");
        }

        #endregion
    }
}

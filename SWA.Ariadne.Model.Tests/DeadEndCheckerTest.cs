// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using SWA.Ariadne.Model;

namespace SWA.Ariadne.Model.Tests
{
    /// <summary>
    ///This is a test class for SWA.Ariadne.Model.DeadEndChecker and is intended
    ///to contain all SWA.Ariadne.Model.DeadEndChecker Unit Tests
    ///</summary>
    [TestClass()]
    public class DeadEndCheckerTest
    {
        #region TestContext

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #endregion

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #region Unit Tests

        /// <summary>
        ///A test for Visit()
        ///</summary>
        [TestMethod()]
        public void DEC_VisitTest_01_2()
        {
            Maze maze = new Maze("BPQG.WLVB.UWPM");
            maze.CreateMaze();                                      // 14 x 10
            maze.PlaceEndpoints();                                  // 2,0 .. 11,7

            DeadEndChecker target = new DeadEndChecker(maze);

            List<MazeSquare> deadSquares;

            MazeSquare sq = maze.StartSquare;                                       // 2,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 0);    // 1,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 2);    // 0,1
        }

        /// <summary>
        ///A test for Visit()
        ///</summary>
        [TestMethod()]
        public void DEC_VisitTest_02_1()
        {
            Maze maze = new Maze("BPQG.WLVB.UWPM");
            maze.CreateMaze();                                      // 14 x 10
            maze.PlaceEndpoints();                                  // 2,0 .. 11,7

            DeadEndChecker target = new DeadEndChecker(maze);

            List<MazeSquare> deadSquares;

            MazeSquare sq = maze.StartSquare;                                       // 2,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 3,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 4,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_N, 1);    // 4,0
        }

        /// <summary>
        ///A test for Visit()
        ///</summary>
        [TestMethod()]
        public void DEC_VisitTest_03_20()
        {
            Maze maze = new Maze("BPQG.WLVB.UWPM");
            maze.CreateMaze();                                      // 14 x 10
            maze.PlaceEndpoints();                                  // 2,0 .. 11,7

            DeadEndChecker target = new DeadEndChecker(maze);

            List<MazeSquare> deadSquares;

            MazeSquare sq = maze.StartSquare;                                       // 2,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,3
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,4
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,5
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,6
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,7
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,8
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 20);   // 2,9
        }

        /// <summary>
        ///A test for Visit()
        ///</summary>
        [TestMethod()]
        public void DEC_VisitTest_04_10()
        {
            Maze maze = new Maze("BPQG.WLVB.UWPM");
            maze.CreateMaze();                                      // 14 x 10
            maze.PlaceEndpoints();                                  // 2,0 .. 11,7

            DeadEndChecker target = new DeadEndChecker(maze);

            List<MazeSquare> deadSquares;

            MazeSquare sq = maze.StartSquare;                                       // 2,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 0);    // 1,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,3
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,4
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,5
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,6
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,7
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 1,8
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 10);   // 1,9
        }

        /// <summary>
        ///A test for Visit()
        ///</summary>
        [TestMethod()]
        public void DEC_VisitTest_05_4()
        {
            Maze maze = new Maze("BPQG.WLVB.UWPM");
            maze.CreateMaze();                                      // 14 x 10
            maze.PlaceEndpoints();                                  // 2,0 .. 11,7

            DeadEndChecker target = new DeadEndChecker(maze);

            List<MazeSquare> deadSquares;

            MazeSquare sq = maze.StartSquare;                                       // 2,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 2,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 0);    // 1,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 4);    // 0,2
        }

        /// <summary>
        ///A test for Visit()
        ///</summary>
        [TestMethod()]
        public void DEC_VisitTest_10_64()
        {
            Maze maze = new Maze("BPQG.WLVB.UWPM");
            maze.CreateMaze();                                      // 14 x 10
            maze.PlaceEndpoints();                                  // 2,0 .. 11,7

            DeadEndChecker target = new DeadEndChecker(maze);

            List<MazeSquare> deadSquares;

            MazeSquare sq = maze.StartSquare;                                       // 2,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 3,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 4,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 4,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 4,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 5,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 6,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_N, 0);    // 6,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 0);    // 5,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_N, 0);    // 5,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 6,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 7,0
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 7,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 8,1
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 8,2
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 8,3
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 8,4
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_W, 0);    // 7,4
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 7,5
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 7,6
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 7,7
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 7,8
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 8,8
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 9,8
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_N, 0);    // 9,7
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_E, 0);    // 10,7
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 0);    // 10,8
            deadSquares = Move(target, ref sq, MazeSquare.WallPosition.WP_S, 64);   // 10,9
        }

        #endregion

        #region Auxiliary methods

        private static List<MazeSquare> Move(DeadEndChecker target, ref MazeSquare sq, MazeSquare.WallPosition direction, int expectedDeadSquaresCount)
        {
            sq = sq.NeighborSquare(direction);
            List<MazeSquare> deadSquares = target.Visit(sq);
            Assert.AreEqual(expectedDeadSquaresCount, deadSquares.Count, "Number of dead squares doesn't match.");
            return deadSquares;
        }

        #endregion
    }
}

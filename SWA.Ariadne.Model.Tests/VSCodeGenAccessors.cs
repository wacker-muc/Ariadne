// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SWA.Ariadne.Model.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class SWA_Ariadne_Model_MazeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::SWA.Ariadne.Model.Maze));
    
    internal SWA_Ariadne_Model_MazeAccessor(global::SWA.Ariadne.Model.Maze target) : 
            base(target, m_privateType) {
    }
    
    internal static int MaxBorderDistance {
        get {
            int ret = ((int)(m_privateType.GetStaticProperty("MaxBorderDistance")));
            return ret;
        }
    }
    
    internal int xSize {
        get {
            int ret = ((int)(m_privateObject.GetField("xSize")));
            return ret;
        }
        set {
            m_privateObject.SetField("xSize", value);
        }
    }
    
    internal int ySize {
        get {
            int ret = ((int)(m_privateObject.GetField("ySize")));
            return ret;
        }
        set {
            m_privateObject.SetField("ySize", value);
        }
    }
    
    internal int xStart {
        get {
            int ret = ((int)(m_privateObject.GetField("xStart")));
            return ret;
        }
        set {
            m_privateObject.SetField("xStart", value);
        }
    }
    
    internal int yStart {
        get {
            int ret = ((int)(m_privateObject.GetField("yStart")));
            return ret;
        }
        set {
            m_privateObject.SetField("yStart", value);
        }
    }
    
    internal int xEnd {
        get {
            int ret = ((int)(m_privateObject.GetField("xEnd")));
            return ret;
        }
        set {
            m_privateObject.SetField("xEnd", value);
        }
    }
    
    internal int yEnd {
        get {
            int ret = ((int)(m_privateObject.GetField("yEnd")));
            return ret;
        }
        set {
            m_privateObject.SetField("yEnd", value);
        }
    }
    
    internal global::SWA.Ariadne.Model.MazeSquare.WallPosition direction {
        get {
            global::SWA.Ariadne.Model.MazeSquare.WallPosition ret = ((global::SWA.Ariadne.Model.MazeSquare.WallPosition)(m_privateObject.GetField("direction")));
            return ret;
        }
        set {
            m_privateObject.SetField("direction", value);
        }
    }
    
    internal global::System.Random random {
        get {
            global::System.Random ret = ((global::System.Random)(m_privateObject.GetField("random")));
            return ret;
        }
        set {
            m_privateObject.SetField("random", value);
        }
    }
    
    internal static int SeedLimit {
        get {
            int ret = ((int)(m_privateType.GetStaticField("SeedLimit")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("SeedLimit", value);
        }
    }
    
    internal int seed {
        get {
            int ret = ((int)(m_privateObject.GetField("seed")));
            return ret;
        }
        set {
            m_privateObject.SetField("seed", value);
        }
    }
    
    internal global::SWA.Ariadne.Model.MazeSquare[,] squares {
        get {
            global::SWA.Ariadne.Model.MazeSquare[,] ret = ((global::SWA.Ariadne.Model.MazeSquare[,])(m_privateObject.GetField("squares")));
            return ret;
        }
        set {
            m_privateObject.SetField("squares", value);
        }
    }
    
    internal static int CodeLength {
        get {
            int ret = ((int)(m_privateType.GetStaticField("CodeLength")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("CodeLength", value);
        }
    }
    
    internal static int CodeDigitRange {
        get {
            int ret = ((int)(m_privateType.GetStaticField("CodeDigitRange")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("CodeDigitRange", value);
        }
    }
    
    internal static void Decode(string code, out int seed, out int xSize, out int ySize, out int xStart, out int yStart, out int xEnd, out int yEnd) {
        object[] args = new object[] {
                code,
                null,
                null,
                null,
                null,
                null,
                null,
                null};
        m_privateType.InvokeStatic("Decode", new System.Type[] {
                    typeof(string),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType(),
                    typeof(int).MakeByRefType()}, args);
        seed = ((int)(args[1]));
        xSize = ((int)(args[2]));
        ySize = ((int)(args[3]));
        xStart = ((int)(args[4]));
        yStart = ((int)(args[5]));
        xEnd = ((int)(args[6]));
        yEnd = ((int)(args[7]));
    }
    
    internal static void ValidateCodeItemRange(string item, int value, int min, int max) {
        object[] args = new object[] {
                item,
                value,
                min,
                max};
        m_privateType.InvokeStatic("ValidateCodeItemRange", new System.Type[] {
                    typeof(string),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal void BuildMaze() {
        object[] args = new object[0];
        m_privateObject.Invoke("BuildMaze", new System.Type[0], args);
    }
    
    internal void FixBorderWalls() {
        object[] args = new object[0];
        m_privateObject.Invoke("FixBorderWalls", new System.Type[0], args);
    }
    
    internal void FixReservedAreas() {
        object[] args = new object[0];
        m_privateObject.Invoke("FixReservedAreas", new System.Type[0], args);
    }
    
    internal void CloseWalls(int left, int right, int top, int bottom) {
        object[] args = new object[] {
                left,
                right,
                top,
                bottom};
        m_privateObject.Invoke("CloseWalls", new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal int CountClosedWalls(global::SWA.Ariadne.Model.MazeSquare sq) {
        object[] args = new object[] {
                sq};
        int ret = ((int)(m_privateObject.Invoke("CountClosedWalls", new System.Type[] {
                    typeof(global::SWA.Ariadne.Model.MazeSquare)}, args)));
        return ret;
    }
}
}
